<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd"
       default-init-method="default_Init" default-destroy-method="default_Destroy">
    <!-- <bean id="helloE" class="beans.TestSpringIntro.HelloWorldEn"/>-->
    <!-- <bean id="helloK" class="beans.TestSpringIntro.HelloWorldKr"/>-->

    <!-- <bean id="t1" class="beans.TestIoCContainer.TestB"/>-->
    <!-- <bean id="t2" class="beans.TestIoCContainer.Test"/>-->

    <!-- xml을 로딩할 때 자동으로 객체가 생성된다. -->
    <!-- 자동주입으로 객체 속성값을 받는다면 id가 필요없어진다 -->
    <!-- <bean class="beans.TestEmptyObj.TestC" />-->

    <!-- xml을 로딩할 때 자동으로 객체가 생성된다. &ndash;&gt;-->
    <!-- id 속성에 이름을 부여하면 getBean 메서드로 객체주소값을 받아 사용가능. -->
    <!-- 생성된 객체는 더 이상 생성되지 않는다. 이를 싱글톤(singleton) 이라 한다. -->
    <!-- <bean id="t3" class="beans.TestEmptyObj.TestC"/>-->

    <!-- lazy-init="true" : xml을 불러올 때, 객체가 생성되지 않는다. (생략시 기본값 false) -->
    <!-- "getBean 메서드를 호출할 때 객체가 생성"되며, singleton 이기 때문에 객체는 하나만 생성된다. -->
    <!-- <bean id="t4" class="beans.TestEmptyObj.TestC" lazy-init="true"/>-->

    <!-- scope 종류-->
    <!-- 1. prototype : xml을 로딩할 때 객체가 생성되지 않으며, getBean 메서드를 "호출할 때 마다" 새 객체를 생성해서 반환.-->
    <!-- 2. singleton :-->
    <!-- <bean id="t5" class="beans.TestEmptyObj.TestC" scope="prototype"/>-->


    <!--
        객체가 생성될 때 생성자가 호출된 이후 init_method에 설정한 메서드가 자동으로 호출되고,
        IoC 컨테이너의 close 메서드를 호출하면 객체가 소멸되며 destroy 메서드에 설정한 메서드가 자동으로 호출된다.
    -->

<!--    <bean id="t6"-->
<!--          class="beans.TestLifeCycle.TestLifeCycle"-->
<!--          lazy-init="true"-->
<!--          init-method="default_Init"-->
<!--          destroy-method="default_Destroy"-->
<!--    />-->

    <!-- init_method 와  destroy_method 가 설정되어 있지 않다면, default 값을 우선한다. -->
<!--    <bean id="t7"-->
<!--          class="beans.TestLifeCycle.TestLifeCycle2"-->
<!--          lazy-init="true"-->
<!--    />-->

    <!--
        위(t7)와는 반대로, init_method 와  destroy_method 가 설정되어 있다면,
        default 가 아닌, "설정되어 있는 메서드"를 우선시한다.
    -->
<!--    <bean id="t8"-->
<!--          class="beans.TestLifeCycle.TestLifeCycle3"-->
<!--          lazy-init="true"-->
<!--          init-method="bean3_Init"-->
<!--          destroy-method="bean3_Destroy"-->
<!--    />-->

    <!--
        1. 설정한 메서드가 존재하지 않는다면 무시된다.
        2. init-method / destroy-method 를 설정했으나 존재하지 않는 경우,
           오류가 발생한다.(** default 값을 이용하는 것이 아님을 유의할 것.)
    -->
<!--    <bean id="t9"-->
<!--          class="beans.TestLifeCycle.TestLifeCycle4"-->
<!--          lazy-init="true"-->
<!--    />-->


    <bean id="t10"
          class="beans.TestBeanPostProcessor.TestBpp"
          lazy-init="true"
          init-method="bean_Init"
          destroy-method="bean_Destroy"
    />
    <bean id="t11"
          class="beans.TestBeanPostProcessor.TestBpp2"
          lazy-init="true"
          init-method="bean_Init2"
          destroy-method="bean_Destroy2"
    />

    <!-- BeanPostProcessor 호출 bean -->
    <bean class="beans.TestBeanPostProcessor.processor.TestBeanPostProcessor"/>
</beans>